@model IEnumerable<MvcClient.Models.Supplier>

@{
    ViewData["Title"] = "Index";
    var hasPreviousPage = (bool?)ViewData["HasPreviousPage"] ?? false;
    var hasNextPage = (bool?)ViewData["HasNextPage"] ?? false;
    var pageIndex = (int?)ViewData["PageIndex"] ?? 1;
    var totalPages = (int?)ViewData["TotalPages"] ?? 1;
    var searchString = ViewData["SearchString"]?.ToString();
    int pageWindow = 2;
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-controller="Suppliers" asp-action="Index" method="get" id="searchForm">
    <p>
        <label>Nome: <input type="text" name="SearchString" /></label>
        <input type="submit" value="Filter" />
        <button type="button" onclick="clearSearch()">Limpar</button>
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CNPJ)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CompanyName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TradeName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Phone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedAt)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UpdatedAt)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CNPJ)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CompanyName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TradeName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Phone)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Email)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedAt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedAt)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(hasPreviousPage ? "" : "disabled")">
            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(pageIndex - 1)"
               asp-route-searchString="@searchString">Anterior</a>
        </li>
        @if (totalPages > 1)
        {
            // Sempre mostrar a primeira página
            <li class="page-item @(1 == pageIndex ? "active" : "")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="1"
                   asp-route-searchString="@searchString">1</a>
            </li>
            // Mostrar reticências se necessário
            if (pageIndex - pageWindow > 2)
            {
                <li class="page-item disabled"><span class="page-link">...</span></li>
            }
            // Mostrar páginas intermediárias
            for (var i = Math.Max(2, pageIndex - pageWindow); i <= Math.Min(totalPages - 1, pageIndex + pageWindow); i++)
            {
                <li class="page-item @(i == pageIndex ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i"
                       asp-route-searchString="@searchString">@i</a>
                </li>
            }
            // Mostrar reticências se necessário
            if (pageIndex + pageWindow < totalPages - 1)
            {
                <li class="page-item disabled"><span class="page-link">...</span></li>
            }
            // Sempre mostrar a última página
            if (totalPages > 1)
            {
                <li class="page-item @(totalPages == pageIndex ? "active" : "")">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@totalPages"
                       asp-route-searchString="@searchString">@totalPages</a>
                </li>
            }
        }
        <li class="page-item @(hasNextPage ? "" : "disabled")">
            <a class="page-link" asp-action="Index" asp-route-pageNumber="@(pageIndex + 1)"
               asp-route-searchString="@searchString">Próxima</a>
        </li>
    </ul>
</nav>



@section Scripts {
    <script>
        function clearSearch() {
            document.querySelector('input[name="SearchString"]').value = '';
            document.getElementById('searchForm').submit();
        }
    </script>
}